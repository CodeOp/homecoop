<?php

/**
 * @file
 * Creates a storage areas field for a pickup location
 */

define('HOMECOOP_STORAGE_AREA_DEFAULT_FIELD_LENGTH', 128);
define('HOMECOOP_STORAGE_AREA_FIELDLENGTH_SETTING_SIZE', 5);
define('HOMECOOP_STORAGE_AREA_FIELDLENGTH_SETTING_MAX_LENGTH', 4);

/**
 * Implements hook_field_info()
 */
function homecoop_storage_area_field_info() {
  return array(
    'homecoop_storage_area' => array(
      'label' => t('Storage Areas'),
      'description' => t('This field stores multiple storage areas per pickup location.'),
      'settings' => array('max_length' => HOMECOOP_STORAGE_AREA_DEFAULT_FIELD_LENGTH,),
      'instance_settings' => array(),
      'default_widget' => 'homecoop_storage_area_widget',
      'default_formatter' => 'text_default',
    ),
  );
}

/**
 * field_schema callback
 */
function homecoop_storage_area_field_schema($field) {
  switch($field['type'])
  {
    case 'homecoop_storage_area':
      return array(
        'columns' => array(
          'value' => array(
            'type' => 'varchar',
            'length' => $field['settings']['max_length'],
            'not null' => TRUE,
          ),
          'max_burden' => array(
            'type' => 'numeric',
            'size' => 'normal',
            'precision' => 10,
            'scale' => 2,
            'not null' => FALSE,
          ),
          'inactive' => array(
            'type' => 'int',
            'size' => 'tiny',
            'not null' => FALSE,
          ),
          'default' => array(
            'type' => 'int',
            'size' => 'tiny',
            'not null' => FALSE,
          ),
        ),
        'indexes' => array(
          'value' => array('value'),
        )
      );
  }
}

/**
 * field_is_empty callback
 */
function homecoop_storage_area_field_is_empty($item, $field) {
  switch($field['type'])
  {
    case 'homecoop_storage_area':
      return empty($item['value']);
  }
}

/**
 * field_settings_form callback
 */
function homecoop_storage_area_field_settings_form($field, $instance, $has_data) {
  switch($field['type'])
  {
    case 'homecoop_storage_area':
      $settings = $field['settings'];
      $form['max_length'] = array(
        '#type' => 'textfield',
        '#size' => HOMECOOP_STORAGE_AREA_FIELDLENGTH_SETTING_SIZE,
        '#max_length' => HOMECOOP_STORAGE_AREA_FIELDLENGTH_SETTING_MAX_LENGTH,
        '#title' => t('Max Length'),
        '#default_value' => $settings['max_length'],
        '#required' => TRUE,
        '#description' => t('The length in characters of this field'),
        '#rules' => array(
            array(
              'rule' => 'regexp[/^[1]\d{0,3}$/]',
              'error' => t('Enter an up to 1000 positive number for %field.')
              ),
          ),
      );
      return $form;
  }
}

/**
 * field_validation callback
 */
function homecoop_storage_area_field_validate($obj_type, $object, $field, $instance,
  $langcode, &$items, &$errors) {
  switch($field['type'])
  {
    case 'homecoop_storage_area':
      foreach($items as $delta => $item) {
        //move on, if empty
        if (empty($item['value'])) {
          continue;
        }
        //validate length
        if (strlen($item['value']) > $field['settings']['max_length']) {
            $errors[$field['field_name']][$langcode][$delta][] = array(
              'error' => 'homecoop_storage_area_max_length',
              'message' => t(
                  '%name may not be larger than %max',
                  array(
                    '%name' => $instance['label'],
                    '%max' => $field['settings']['max_length'],
                  )
                ),
            );
        }
        //otherwise (if length is valid)
        //...
      }
      break;
  }
}

/**
 * 
 * Implements hook_field_widget_info
 */
function homecoop_storage_area_field_widget_info() {
  return array(
    'homecoop_storage_area_widget' => array(
      'label' => t('HomeCoop Storage Area Widget'),
      'field types' => array('homecoop_storage_area'),
    ),
  );
}

/**
 * Implements hook_field_widget_form
 * 
 * Creates the homecoop_storage_area_widget
 */
function homecoop_storage_area_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  if ($instance['widget']['type'] != 'homecoop_storage_area_widget') {
    return $element;
  }
  
  $widget = $element;
  $widget['#delta'] = $delta;
  
  $widget += array(
    '#prefix' => '<div class="resgridrow">',
    '#suffix' => '</div>',
  );
  
  $is_new = TRUE;
  $id = NULL;
  $title = NULL;
  $values = array();
  $maxburdenid = NULL;
  $isdisabledid = NULL;
  $isdefaultid = NULL;
  if (is_array($items[$delta])) {
    $is_new = FALSE;
    $title = t('Storage area #@num', array('@num' => $delta));
    $id = 'txtStorageAreaName_' . $delta;
    $maxburdenid = 'txtMaxBurden_' . $delta;
    $isdisabledid = 'ctlSAIsDisabled_' . $delta;
    $isdefaultid = 'radDefaultStorage_' . $delta;
    //prepare values:
    //note the array structure of $items[$delta] is langcode -> value, 
    //while codeop_util_multilang_control expects just values by langcode
    foreach($items[$delta] as $lang => $properties) {
      if (isset($properties['value'])) {
        $values[$lang] = $properties['value'];
      }
    }
  }
  else { //new line
    $title = t('Storage area');
    $id = 'txtnewStorageAreaName_' . $delta;
    $maxburdenid = 'txtnewMaxBurden_' . $delta;
    $isdisabledid = 'ctlnewSAIsDisabled_' . $delta;
    $isdefaultid = 'radnewDefaultStorage_' . $delta;
  }
  
  $multilang = array(
    'ID' => $id,
    'title' => $title,
    'element' => array(
      '#type' => 'textfield',
      '#maxlength' => $field['settings']['max_length'],
    ),
    'values' => $values,
  );
  
  $widget['storageareanames_' . $delta] = codeop_util_multilang_element(&$multilang) +
      array('#weight' => 10);
  
  $widget[$maxburdenid] = array(
    '#type' => 'textfield',    
    '#weight' => 20, 
    '#title' => t('Max. storage'),
    '#maxlength' => 10,
    '#size' => 25,
    '#rules' => array('numeric'),
    '#number_type' => 'decimal',
    '#description' => t('The maximum capacity of the storage area in terms of the product field &quot;Burden&quot;. 
      The sum for all products of &quot;Burden&quot; times product quantity will be compared to this value 
      for all the orders of products designated to this storage area. 
      This is only a default value and can be overwritten in the cooperative order&#x27;s storage area settings.'),
  );
  
  if (isset($items[$delta][LANGUAGE_NONE]['max_burden'])) {
    $widget[$maxburdenid]['#default_value'] = check_plain($items[$delta][LANGUAGE_NONE]['max_burden']);
  }
  
  $id = 'thirdrow' . $delta;
  $widget[$id] = array(
    '#prefix' => '<div class="resgridrow">',
    '#suffix' => '</div>',
    '#weight' => 30,
  );
  
  $widget[$id][$isdisabledid] = array(
        '#type' => 'select',
        '#key_type' => 'associative',
        '#title' => t('Status'),
        //#prefix is set later according to whether this element is alone in the row or not
        '#suffix' => '</div>',
        '#options' => array(0 => t('Active'), 1 => t('Inactive')),
        '#weight' => 20,
  );
  
  if (!$is_new) {
    $widget[$id]['chkDeleteStorageArea_' . $delta] = array(
      '#type' => 'checkbox',
      '#title' => t('Delete'),
      '#prefix' => '<div class="firstresgridcell">',
      '#suffix' => '</div>',
      '#weight' => 10,
    );
    
    $widget[$id][$isdisabledid]['#prefix'] = '<div class="resgridcell">';
  }
  else {
    $widget[$id][$isdisabledid]['#prefix'] = '<div class="firstresgridcell">';
  }

  if (isset($items[$delta][LANGUAGE_NONE]['inactive'])) {
    $widget[$id][$isdisabledid]['#default_value'] = $items[$delta][LANGUAGE_NONE]['inactive'];
  }
  
  $widget[$id][$isdefaultid] = array(
    '#type' => 'radio',
    '#name' => 'radDefaultStorage',
    '#title' => t('Default'),
    '#prefix' => '<div class="resgridcell">',
    '#suffix' => '</div>',
  );
  
  if (!$is_new) {
    $widget[$id][$isdefaultid]['#default_value'] = $items[$delta][LANGUAGE_NONE]['default'];
  }
  
  $element['storagearea_' . $delta] = $widget;
  
  return $element;
}